pipeline {
    agent {
        label 'LINUX_RHEL' //RHEL Jenkins Slave node to build
    }

    // parameters {
    //     choice(name: 'Environment', choices: ['Staging', 'Production'], description: 'Select deployment environment')
    // }

    environment {
        ARTIFACT_NAME = 'target/*.jar'
        STAGING_DIR = '/var/www/html/staging'
        PROD_DIR = '/var/www/html/prod'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                git url: 'https://github.com/Riyazkhan14/Bits-MTech-SE-DevOps.git', branch: 'feature/Riyaz'
            }
        }

        stage('Build') {
            steps {
                echo 'Building project using Maven...'
                sh 'mvn clean install'
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                sh 'mvn test'
            }
        }

        stage('Package') {
            steps {
                echo 'Packaging the application...'
                sh 'mvn package'
            }
        }

        stage('Deploy') {
            steps {
                script {
                    handleDeployment(params.Environment)
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully for ${params.Environment} environment!"
        }
        failure {
            echo 'Pipeline failed. Please check the logs!'
        }
    }
}

// === Helper function to handle environment-specific deployment ===
def handleDeployment(env) {
    def targetDir = (env == 'prod') ? "${env.PROD_DIR}" : "${env.STAGING_DIR}"

    echo "Deploying to '${env}' environment â†’ Directory: ${targetDir}"

    sh """
        echo 'Checking for JAR file...'
        ls -la target/*.jar || echo 'JAR not found!'

        echo 'Creating target directory if not exists...'
        mkdir -p ${targetDir}

        echo 'Copying JAR file to ${targetDir}...'
        cp ${env.ARTIFACT_NAME} ${targetDir}

        echo 'Verifying deployment...'
        ls -la ${targetDir}
    """

    echo "Deployment to ${env} environment complete!"
}
